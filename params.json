{"name":"Picolog","tagline":"Tiny logging helper for use in the browser","body":"# picolog <sub><sup>v0.2.0</sup></sub>\r\n**Tiny logging helper for use in the browser**\r\n\r\n![logo](https://cdn.rawgit.com/download/picolog/0.2.0/picolog.png)\r\n\r\n## Yet another logging library?\r\nNo. Picolog is much less than that. \r\n\r\nAll Picolog is, is a tiny shim that lets you safely log to the console\r\nwithout having to worry about environments where no `console` object is\r\navailable. It just adds one feature: logging levels. \r\n\r\nBecause it uses native logging under the hood and weighs in at **less than 1 kB** minified\r\nand gzipped, it allows you to keep your logging statements around in your production builds \r\nwithout having to worry about size/performance or polluting the user's log with too many messages.\r\n\r\n## Download\r\n* [picolog.umd.js](https://cdn.rawgit.com/download/picolog/0.2.0/dist/picolog.umd.js) (~2kB, source)\r\n* [picolog.min.js](https://cdn.rawgit.com/download/picolog/0.2.0/dist/picolog.min.js) (~1kB, minified)\r\n* [picolog.min.js.map](https://cdn.rawgit.com/download/picolog/0.2.0/dist/picolog.min.js.map) (~2kB, debug map file)\r\n\r\n## Include on your page\r\n`picolog` can be used directly from CDN, from a local script file, or from a module loader.\r\n\r\n### CDN\r\nThis is by far the easiest method and gives good performance to boost. Use this if you are in doubt.\r\n```xml\r\n<script src=\"https://cdn.rawgit.com/download/picolog/0.2.0/dist/picolog.min.js\"></script>\r\n```\r\n\r\n### Local script file\r\nDownload picolog.min.js, place it in a folder `lib` on your website and include it like this:\r\n```xml\r\n<script src=\"lib/picolog.min.js\"></script>\r\n```\r\n\r\n### Module loaders\r\nPicolog implements the Universal Module Pattern and as such, is available to be consumed\r\nfrom Node modules as well as via an AMD loader such as RequireJS. \r\n\r\n#### Node \r\n```js\r\nvar log = require('picolog');\r\n// here, the log function is available\r\nlog().info('Picolog is loaded');\r\n```\r\n\r\n#### AMD\r\n```js\r\ndefine(['picolog'], function(log){\r\n\t// here, the log function is available\r\n\tlog().info('Picolog is loaded');\r\n});\r\n```\r\nTo be able to load Picolog from CDN as an AMD module, configure the CDN url like so <small>(note the absence of `.js` in the url)</small>:\r\n```js\r\nrequire.config({\r\n\tpaths: {\r\n\t\t'picolog': 'https://cdn.rawgit.com/download/picolog/0.2.0/dist/picolog.min'\r\n\t}\r\n});\r\n```\r\n\r\n## Logging messages\r\nPicolog defines 4 logging methods, which correspond with available log levels:\r\n```js\r\nlog().log('This logs a debug message');\r\nlog().info('This logs an info message');\r\nlog().warn('This logs a warning message');\r\nlog().error('This logs an error message');\r\n```\r\nNotice how we call `log()` as a function. This will return the actual `console` object if it \r\nexists in this environment, or a no-op object if it does not. The advantage of this is that the\r\nline numbers seen next to each logging statement in the console will be the actual line numbers\r\nof *your* line of code doing the logging and not of some wrapping function inside picolog.\r\n\r\n## Logging levels\r\nPicolog defines 4 logging levels, which correspond with the available logging methods:\r\n```js\r\nlog.DEBUG; // 0\r\nlog.INFO; // 1\r\nlog.WARN; // 2\r\nlog.ERROR; // 3\r\n```\r\nIn addition, there is a fifth level that completely disables all logging:\r\n```js\r\nlog.NONE; // 4\r\n```\r\nTo get or set the log level, we use the `log.level` function:\r\n```js\r\nif (log.level() <= log.INFO) {\r\n\tlog().info('This message will be logged');\r\n}\r\nlog.level(log.WARN);\r\nlog().info('This info message will NOT be logged.');\r\nlog().warn('This warning message WILL be logged.');\r\nlog.level(log.NONE);\r\nlog().error('Logging is completely disabled.');\r\n```\r\nBy default, the log level is set to `log.INFO`.\r\n\r\nTo change the log level on the page we are looking at we can do\r\ntwo things:\r\n 1. Open the console and manually set the log level from there\r\n 2. Add a parameter to the url of the page we want to inspect\r\n\r\nMethod 2 will make sure your set level is in effect right from\r\nthe first load of picolog. \r\nMethod 1 will take effect from the moment the statement is executed.\r\n\r\nTo set the different levels from a URL parameter for page\r\n * `http://www.example.com/my/page.html`\r\n\r\nwe would add URL parameters like this:\r\n * `http://www.example.com/my/page.html?log=debug`\r\n * `http://www.example.com/my/page.html?log=info`\r\n * `http://www.example.com/my/page.html?log=warn`\r\n * `http://www.example.com/my/page.html?log=error`\r\n * `http://www.example.com/my/page.html?log=none`\r\n\r\n## Performance considerations\r\nAny logging methods on the console returned by `log()` that correspond to a log level which is \r\nlower than the currently set level, are replaced by no-op methods. As such, you generally don't\r\nhave to worry about the performance overhead of leaving the log statements in the production \r\ncode. There is one exception to this rule though. If preparing the message itself is a costly\r\noperation, you may want to surround the log code with an `if (log.level <= myLevel)` statement:\r\n```js\r\nif (log.level() <= log.INFO) {\r\n\tvar message = doLotsOfWorkToGenerateLogMessage();\r\n\tlog().info(message);\r\n}\r\n```\r\n\r\n## Copyright\r\nCopyright 2015 by Stijn de Witt. Some rights reserved.\r\n\r\n## License\r\nLicensed under the [Creative Commons Attribution 4.0 International (CC-BY-4.0)](https://creativecommons.org/licenses/by/4.0/) Open Source license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}